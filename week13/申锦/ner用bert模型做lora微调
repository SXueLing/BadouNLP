# -*- coding: utf-8 -*-

import torch
import torch.nn as nn
from torch.optim import Adam, SGD
from torchcrf import CRF
from transformers import BertModel
from peft import LoraConfig, get_peft_model

"""
建立网络模型结构
"""


class TorchModel(nn.Module):
    def __init__(self, config):
        super(TorchModel, self).__init__()
        max_length = config["max_length"]
        class_num = config["class_num"]
        # self.embedding = nn.Embedding(vocab_size, hidden_size, padding_idx=0)
        # self.layer = nn.LSTM(hidden_size, hidden_size, batch_first=True, bidirectional=True, num_layers=num_layers)
        self.bert = BertModel.from_pretrained(config["bert_path"], return_dict=False)

        # 配置LoRA
        lora_config = LoraConfig(
            r=config["lora_r"],  # LoRA的秩
            lora_alpha=config["lora_alpha"],  # LoRA的缩放因子
            target_modules=["query", "key", "value"],  # 应用LoRA的目标模块
            lora_dropout=config["lora_dropout"],  # LoRA的丢弃率
            # bias="none",  # 不调整偏置
            # task_type="TOKEN_CLS"  # 任务类型为令牌分类
        )
        self.bert = get_peft_model(self.bert, lora_config)

        self.classify = nn.Linear(self.bert.config.hidden_size, class_num)
        self.crf_layer = CRF(class_num, batch_first=True)
        self.use_crf = config["use_crf"]
        self.loss = torch.nn.CrossEntropyLoss(ignore_index=-1)  # loss采用交叉熵损失

    # 当输入真实标签，返回loss值；无真实标签，返回预测值
    def forward(self, x, target=None):
        # x = self.embedding(x)  # input shape:(batch_size, sen_len)
        # x, _ = self.layer(x)      # input shape:(batch_size, sen_len, input_dim)

        x, _ = self.bert(x)
        predict = self.classify(x)  # ouput:(batch_size, sen_len, num_tags) -> (batch_size * sen_len, num_tags)

        if target is not None:
            if self.use_crf:
                mask = target.gt(-1)
                return - self.crf_layer(predict, target, mask, reduction="mean")
            else:
                # (number, class_num), (number)
                return self.loss(predict.view(-1, predict.shape[-1]), target.view(-1))
        else:
            if self.use_crf:
                return self.crf_layer.decode(predict)
            else:
                return predict

    def print_trainable_parameters(self):
        """
        转发调用到内部的bert模型
        """
        self.bert.print_trainable_parameters()


def choose_optimizer(config, model):
    optimizer = config["optimizer"]
    learning_rate = config["learning_rate"]
    if optimizer == "adam":
        return Adam(model.parameters(), lr=learning_rate)
    elif optimizer == "sgd":
        return SGD(model.parameters(), lr=learning_rate)


if __name__ == "__main__":
    from config import Config

    # 添加LoRA相关配置
    # Config["lora_r"] = 8
    # Config["lora_alpha"] = 16
    # Config["lora_dropout"] = 0.1
    model = TorchModel(Config)
    model.print_trainable_parameters()  # 打印可训练的参数
