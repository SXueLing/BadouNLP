import numpy as np
import torch
import torch.nn as nn
import matplotlib.pyplot as plt
# 设置后端为TkAgg
plt.rcParams['backend'] = 'TkAgg'
plt.rcParams['font.sans-serif'] = ['SimHei']

"""
基于PyTorch框架编写模型训练
实现一个自行构造的找规律(机器学习)多分类任务
规律：x是一个5维向量，五维随机向量最大的数字在哪维就属于哪一类
"""

class TorchModel(nn.Module):
    _initialized = False  # 新增一个类属性用于标记是否已经初始化过

    def __init__(self, input_size, num_classes):
        super(TorchModel, self).__init__()

        if not self._initialized:
            self.linear = nn.Linear(input_size, num_classes)
            self.activation = nn.Softmax(dim=1)
            self.loss = nn.CrossEntropyLoss()

            self._initialized = True  # 标记已经初始化完成

    def forward(self, x, y=None):
        x = self.linear(x)
        y_pred = self.activation(x)
        if y is not None:
            return self.loss(y_pred, y)
        else:
            return y_pred

# 生成一个样本, 样本的生成方法，代表了我们要学习的规律
# 随机生成一个5维向量，五维随机向量最大的数字在哪维就属于哪一类
def build_sample():
    x = np.random.random(5)
    y = np.argmax(x)
    return x, y

# 随机生成一批样本
def build_dataset(total_sample_num):
    X_list = []
    Y_list = []
    for i in range(total_sample_num):
        x, y = build_sample()
        X_list.append(x)
        Y_list.append(y)

    X_numpy = np.array(X_list)
    Y_numpy = np.array(Y_list)

    return torch.FloatTensor(X_numpy), torch.LongTensor(Y_numpy)

# 测试代码
# 用来测试每轮模型的准确率
def evaluate(model):
    model.eval()
    test_sample_num = 100
    x, y = build_dataset(test_sample_num)
    print("本次预测集中共有样本数：", test_sample_num)
    correct = 0
    with torch.no_grad():
        y_pred = model(x)
        _, predicted_classes = torch.max(y_pred, dim=1)
        correct += (predicted_classes == y).sum().item()
    accuracy = correct / test_sample_num
    print("正确预测个数：", correct, "，正确率：", accuracy)
    return accuracy

def main():
    # 配置参数
    epoch_num = 30
    batch_size = 20
    train_sample = 5000
    input_size = 5
    num_classes = 5
    learning_rate = 0.001
    # 建立模型
    model = TorchModel(input_size, num_classes)
    # 选择优化器
    optim = torch.optim.Adam(model.parameters(), lr=learning_rate)
    log = []
    # 创建训练集，正常任务是读取训练集
    train_x, train_y = build_dataset(train_sample)
    # 训练过程
    for epoch in range(epoch_num):
        model.train()
        watch_loss = []
        for batch_index in range(train_sample // batch_size):
            x = train_x[batch_index * batch_size: (batch_index + 1) * batch_size]
            y = train_y[batch_index * batch_size: (batch_index + 1) * batch_size]
            loss = model(x, y)
            loss.backward()
            optim.step()
            optim.zero_grad()
            watch_loss.append(loss.item())
        print("=========\n第%d轮平均loss:%f" % (epoch + 1, np.mean(watch_loss)))
        acc = evaluate(model)
        log.append([acc, float(np.mean(watch_loss))])
    # 保存模型
    torch.save(model.state_dict(), "model.bin")
    # 画图
    titles = ['准确率曲线', '损失值曲线']
    ylabels = ['准确率 (acc)', '损失值 (loss)']
    data_cols = [0, 1]

    for i, title, ylabel, col in zip(range(2), titles, ylabels, data_cols):
        plt.subplot(1, 2, i + 1)
        plt.plot(range(len(log)), [l[col] for l in log])
        plt.xlabel('迭代次数')
        plt.ylabel(ylabel)
        plt.title(title)

    plt.show()

# 使用训练好的模型做预测
def predict(model_path, input_vec):
    input_size = 5
    num_classes = 5
    model = TorchModel(input_size, num_classes)
    weights = torch.load(model_path, weights_only=True)
    model.load_state_dict(weights)
    model.eval()

    input_vec_tensor = torch.FloatTensor(input_vec)

    with torch.no_grad():
        result = model(input_vec_tensor)
        _, predicted_classes = torch.max(result, dim=1)

    for vec, res in zip(input_vec, predicted_classes):
        print("输入：", vec, "，预测类别：", res.item())

  
if __name__ == "__main__":
    main()
    test_vec = [[0.97889086,0.15229675,0.31082123,0.03504317,0.88920843],
                [0.74963533,0.5524256,0.95758807,0.95520434,0.84890681],
                [0.00797868,0.67482528,0.13625847,0.34675372,0.19871392],
                [0.09349776,0.59416669,0.92579291,0.41567412,0.1358894]]
    predict("model.bin", test_vec)
