#coding:utf8

import torch
import torch.nn as nn
import numpy as np
import random
import json
import matplotlib.pyplot as plt

"""

基于pytorch的网络编写
实现一个网络完成一个简单nlp任务
判断文本中 出现 你 字 以下标位置分类
字符串长度为5 不出现时为第6类，
出现一次 你 字  以出现的下标位置分类
若出现多次 你 字 则以最大下标位置分类

"""

class TorchModel(nn.Module):
    def __init__(self, vector_dim, sentence_length, vocab):
        super(TorchModel, self).__init__()
        self.embedding = nn.Embedding(len(vocab), vector_dim, 0)  #embedding层
        # self.pool = nn.AvgPool1d(sentence_length)   #池化层
        self.rnn = nn.RNN(vector_dim, vector_dim, 1, True, False)  # RNN层
        self.classify = nn.Linear(5, 6)     #线性层
        self.loss_fn = nn.CrossEntropyLoss()  # 交叉熵损失函数，适用于多分类
    #当输入真实标签，返回loss值；无真实标签，返回预测值
    def forward(self, x, y=None):
        x = self.embedding(x)                      #(batch_size, sen_len) -> (batch_size, sen_len, vector_dim) 20,5,20
        x, _ = self.rnn(x)                         #(batch_size, sen_len, vector_dim) -> (batch_size, sen_len, vector_dim)
        x = x.transpose(1, 2)                      #(batch_size, sen_len, vector_dim) -> (batch_size, vector_dim, sen_len) 20,20,5
        last_hidden_state = x[:, -1, :]            # (batch_size, vector_dim) 20,5
        y_pred = self.classify(last_hidden_state)  # (batch_size, vector_dim) -> (batch_size, 6) 20,5 * 5,6 = 20,6
        if y is not None:
            return self.loss_fn(y_pred, y)   #预测值和真实值计算损失
        else:
            return y_pred                 #输出预测结果

#字符集随便挑了一些字，实际上还可以扩充
#为每个字生成一个标号
#字符串长度为5 不出现时为第6类
def build_vocab():
    chars = "你我他defghijklmnopqrstuvwxyz"  #字符集
    vocab = {"pad": 0}
    for index, char in enumerate(chars):
        vocab[char] = index+1   #每个字对应一个序号
    vocab['unk'] = len(vocab) #26
    return vocab

#随机生成一个样本
#从所有字中选取sentence_length个字，获取一个“你”字的位置
#如果没有“你”字，则为第5类
def build_sample(vocab, sentence_length):
    #随机从字表选取sentence_length个字，可能重复
    x = [random.choice(list(vocab.keys())) for _ in range(sentence_length)]
    #指你字 出现的位置 0-4 分类
    y = [i for i, char in enumerate(x) if char == '你']
    count = len(y)  # “你”字出现的次数

    if count == 0:
        # print(f"字符串: {x}")
        # print("该字符串不包含‘你’字。")
        y = 5  # 未出现“你”字，分类为第6类
    else:
        # print(f"字符串: {x}")
        # print(f"“你”字出现的下标: {y}（出现{count}次）")
        # print(f"“你”字出现的下标: {max(y)}（出现最大位置）")
        # 若出现多次你 字 则以最大下标位置分类
        y = max(y)
    x = [vocab.get(word, vocab['unk']) for word in x]   #将字转换成序号，为了做embedding
    return x, y

#建立数据集
#输入需要的样本数量。需要多少生成多少
def build_dataset(sample_length, vocab, sentence_length):
    dataset_x = []
    dataset_y = []
    for i in range(sample_length):
        x, y = build_sample(vocab, sentence_length)
        dataset_x.append(x)
        dataset_y.append(y)
    return torch.LongTensor(dataset_x), torch.LongTensor(dataset_y)

#建立模型
def build_model(vocab, char_dim, sentence_length):
    model = TorchModel(char_dim, sentence_length, vocab)
    return model

#测试代码
#用来测试每轮模型的准确率
def evaluate(model, vocab, sample_length):
    model.eval()
    x, y = build_dataset(200, vocab, sample_length)   #建立200个用于测试的样本
    correct, wrong = 0, 0
    with torch.no_grad():
        for x_i, y_i in zip(x, y):
            #这行代码将当前样本x_i通过模型进行预测
            # 确保x_i是批次形式
            x_i = x_i.unsqueeze(0)
            y_pred = model(x_i)
            #找出y_pred（模型预测的概率分布）中概率最高的类别的索引
            pred_index = torch.argmax(y_pred)
            if pred_index == y_i:
                correct += 1
            else:
                wrong += 1

    # 打印正确率和相关信息
    accuracy = correct / (correct + wrong)
    print("正确预测个数：%d, 正确率：%f" % (correct, accuracy))
    return accuracy


def main():
    #配置参数
    epoch_num = 20        #训练轮数
    batch_size = 50       #每次训练样本个数
    train_sample = 5000    #每轮训练总共训练的样本总数
    char_dim = 20         #每个字的维度
    sentence_length = 5   #样本文本长度
    learning_rate = 0.005 #学习率
    # 建立字表
    vocab = build_vocab()
    # 建立模型
    model = build_model(vocab, char_dim, sentence_length)
    # 选择优化器
    optim = torch.optim.Adam(model.parameters(), lr=learning_rate)
    log = []
    # 训练过程
    for epoch in range(epoch_num):
        model.train()
        watch_loss = []
        for batch in range(int(train_sample / batch_size)):
            x, y = build_dataset(batch_size, vocab, sentence_length) #构造一组训练样本
            optim.zero_grad()    #梯度归零
            loss = model(x, y)   #计算loss
            loss.backward()      #计算梯度
            optim.step()         #更新权重
            watch_loss.append(loss.item())
        print("=========\n第%d轮平均loss:%f" % (epoch + 1, np.mean(watch_loss)))
        acc = evaluate(model, vocab, sentence_length)   #测试本轮模型结果
        log.append([acc, np.mean(watch_loss)])
    #画图
    plt.plot(range(len(log)), [l[0] for l in log], label="acc")  #画acc曲线
    plt.plot(range(len(log)), [l[1] for l in log], label="loss")  #画loss曲线
    plt.legend()
    plt.show()
    #保存模型
    torch.save(model.state_dict(), "model.pth")
    # 保存词表
    writer = open("vocab.json", "w", encoding="utf8")
    writer.write(json.dumps(vocab, ensure_ascii=False, indent=2))
    writer.close()
    return

#使用训练好的模型做预测
def predict(model_path,  input_strings):
    char_dim = 20  # 每个字的维度
    sentence_length = 5  # 样本文本长度
    vocab =  build_vocab()#加载字符表
    model = build_model(vocab, char_dim, sentence_length)     #建立模型
    model.load_state_dict(torch.load(model_path))             #加载训练好的权重
    x = []
    for input_string in input_strings:
        x.append([vocab[char] for char in input_string][:5])  #将输入序列化
    model.eval()   #测试模式
    with torch.no_grad():  #不计算梯度
        result = model.forward(torch.LongTensor(x))  #模型预测
    for i, input_string in enumerate(input_strings):
        probs = result[i]
        _, predicted_class = torch.max(probs, 0)  # 获取最大概率的类别索引
        print("输入：%s, 预测类别：%d" % (input_string, predicted_class.item()))




if __name__ == "__main__":
    main()
    test_strings = ["你nvfd", "wz你d你w", "你qwde", "n我kww"]
    predict("model.pth",  test_strings)
