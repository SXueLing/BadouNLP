#coding:utf8

import torch
import torch.nn as nn
import numpy as np
import random
import json
import matplotlib.pyplot as plt

"""

基于pytorch的网络编写
实现一个网络完成一个简单nlp任务
判断文本中是否有某些特定字符出现

"""

class TorchModel(nn.Module):
    def __init__(self, vector_dim, sentence_length, vocab, num_classes):
        super(TorchModel, self).__init__()
        self.embedding = nn.Embedding(len(vocab), vector_dim, padding_idx=0)  # embedding层
        self.rnn = nn.RNN(vector_dim, vector_dim, batch_first=True)  # RNN层
        self.classify = nn.Linear(vector_dim, num_classes)  # 线性层
        self.loss = nn.CrossEntropyLoss()  # 交叉熵损失函数

    def forward(self, x, y=None):
        x = self.embedding(x)  # (batch_size, sen_len, vector_dim)
        x, _ = self.rnn(x)  # (batch_size, sen_len, vector_dim)
        x = x[:, -1, :]  # 取RNN最后一个时间步的输出
        x = self.classify(x)  # (batch_size, num_classes)
        if y is not None:
            return self.loss(x, y)  # 预测值和真实值计算损失
        else:
            return x  # 输出预测结果

# 建立字表
def build_vocab():
    chars = "你我他defghijklmnopqrstuvwxyz"  # 字符集
    vocab = {"pad": 0}
    for index, char in enumerate(chars):
        vocab[char] = index + 1  # 每个字对应一个序号
    vocab['unk'] = len(vocab)  # 26
    return vocab

# 随机生成一个样本
def build_sample(vocab, sentence_length, target_chars):
    x = [random.choice(list(vocab.keys())) for _ in range(sentence_length)]
    target_char = random.choice(target_chars)
    pos = random.randint(0, sentence_length - 1)
    x[pos] = target_char
    x = [vocab.get(word, vocab['unk']) for word in x]  # 将字转换成序号
    y = pos  # 真实位置
    return x, y

# 建立数据集
def build_dataset(sample_length, vocab, sentence_length, target_chars):
    dataset_x = []
    dataset_y = []
    for i in range(sample_length):
        x, y = build_sample(vocab, sentence_length, target_chars)
        dataset_x.append(x)
        dataset_y.append(y)
    return torch.LongTensor(dataset_x), torch.LongTensor(dataset_y)

# 测试代码
def evaluate(model, vocab, sample_length, target_chars):
    model.eval()
    x, y = build_dataset(200, vocab, sample_length, target_chars)
    correct, total = 0, 0
    with torch.no_grad():
        y_pred = model(x)
        _, predicted = torch.max(y_pred, 1)
        total += y.size(0)
        correct += (predicted == y).sum().item()
    print("正确预测个数：%d, 正确率：%f" % (correct, correct / total))
    return correct / total


def main():
    #配置参数
    epoch_num = 10        #训练轮数
    batch_size = 20       #每次训练样本个数
    train_sample = 500    #每轮训练总共训练的样本总数
    char_dim = 20         #每个字的维度
    sentence_length = 6   #样本文本长度
    learning_rate = 0.005 #学习率
    num_classes = sentence_length
    # 建立字表
    vocab = build_vocab()
    target_chars = list(vocab.keys())  # 假设所有字符都是目标字符
    # 建立模型
    model = TorchModel(char_dim, sentence_length, vocab, num_classes)
    # 选择优化器
    optim = torch.optim.Adam(model.parameters(), lr=learning_rate)
    log = []
    # 训练过程
    for epoch in range(epoch_num):
        model.train()
        watch_loss = []
        for batch in range(int(train_sample / batch_size)):
            x, y = build_dataset(batch_size, vocab, sentence_length, target_chars)
            optim.zero_grad()
            loss = model(x, y)
            loss.backward()
            optim.step()
            watch_loss.append(loss.item())
        print("=========\n第%d轮平均loss:%f" % (epoch + 1, np.mean(watch_loss)))
        acc = evaluate(model, vocab, sentence_length, target_chars)
        log.append([acc, np.mean(watch_loss)])
    #画图
    plt.plot(range(len(log)), [l[0] for l in log], label="acc")  #画acc曲线
    plt.plot(range(len(log)), [l[1] for l in log], label="loss")  #画loss曲线
    plt.legend()
    plt.show()
    #保存模型
    torch.save(model.state_dict(), "model.pth")
    # 保存词表
    writer = open("vocab.json", "w", encoding="utf8")
    writer.write(json.dumps(vocab, ensure_ascii=False, indent=2))
    writer.close()
    return

# 使用训练好的模型做预测
def predict(model_path, vocab_path, input_strings):
    char_dim = 20  # 每个字的维度
    sentence_length = 6  # 样本文本长度
    vocab = json.load(open(vocab_path, "r", encoding="utf8"))  # 加载字符表
    num_classes = sentence_length  # 类别数等于句子长度
    model = TorchModel(char_dim, sentence_length, num_classes)  # 建立模型
    model.load_state_dict(torch.load(model_path))  # 加载训练好的权重
    x = []
    for input_string in input_strings:
        x.append([vocab.get(char, vocab['unk']) for char in input_string])  # 将输入序列化，使用vocab.get避免KeyError
    model.eval()  # 测试模式
    with torch.no_grad():  # 不计算梯度
        result = model(torch.LongTensor(x))  # 模型预测
    for i, input_string in enumerate(input_strings):
        # 将预测结果转换为概率分布
        probs = torch.nn.functional.softmax(result[i], dim=0)
        # 获取最大概率的类别和对应的值
        _, predicted_class = torch.max(result[i], 0)
        max_prob = probs[predicted_class].item()
        print("输入：%s, 预测类别：%d, 最大概率值：%f" % (input_string, predicted_class.item(), max_prob))  # 打印结果


if __name__ == "__main__":
    #在 Python 中，当你运行一个模块时，Python 解释器会把一个特殊的变量 __name__ 设置为 "__main__"。如果模块被导入到另一个模块中，__name__ 则会被设置为模块的名字。
    main()
    test_strings = ["fnvfee", "wz你dfg", "rqwdeg", "n我kwww"]
    predict("model.pth", "vocab.json", test_strings)
