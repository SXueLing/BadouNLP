#coding:utf8

import torch
import torch.nn as nn
import numpy as np
import random
import json
import matplotlib.pyplot as plt

"""

基于pytorch的网络编写
实现一个网络完成一个简单nlp任务
对字符串进行分类，特定字符出现在字符串中的哪一位则属于哪一位

"""

class TorchModel(nn.Module):
    def __init__(self,  vector_dim,sentence_length, vocab):
        super(TorchModel, self).__init__()
        self.embedding = nn.Embedding(len(vocab), vector_dim, padding_idx=0)  # embedding层
        self.layer = nn.RNN(vector_dim, 32, bias=False,batch_first=True)  # batch_first=True默认模型输入的第一维是batch_size
        self.classify=nn.Linear(32,sentence_length+1)
        self.pool = nn.AvgPool1d(sentence_length)   #池化层
        self.loss = nn.functional.cross_entropy  #loss函数采用均方差损失

    #当输入真实标签，返回loss值；无真实标签，返回预测值
    def forward(self, x, y=None):
        x = self.embedding(x)                      #(batch_size, sen_len) -> (batch_size, sen_len, vector_dim)
        x,_ = self.layer(x)                   #(batch_size,sen_len，vector_dim)->output：(batch_size, sen_len, hidden_size)
        x=self.classify(x)
        x = x.transpose(1, 2)  # (batch_size, sen_len, vector_dim) -> (batch_size, vector_dim, sen_len)
        x = self.pool(x)  # (batch_size, vector_dim, sen_len)->(batch_size, vector_dim, 1)
        x = x.squeeze()
        y_pred = x

        if y is not None:
            return self.loss(y_pred, y)   #预测值和真实值计算损失,这里样本的类数应该与hidden_size的大小相同
        else:                             ##(batch_size, hidden_size)后面就是要看hidden_size这个维度中哪个数值最大，那么该样本的预测分类就是哪一类了，理论上这个hidden_size应该和字符串长度相等
            return nn.functional.softmax(y_pred)                 #输出预测结果

#字符集随便挑了一些字，实际上还可以扩充
#为每个字生成一个标号
#{"a":1, "b":2, "c":3...}
#abc -> [1,2,3]
def build_vocab():
    chars = "你我他defghijklmnopqrstuvwxyz"  #字符集
    vocab = {"pad":0}
    for index, char in enumerate(chars):
        vocab[char] = index+1   #每个字对应一个序号
    vocab['unk'] = len(vocab) #26
    return vocab

#随机生成一个样本
#从所有字中选取sentence_length个字
#用”我“字符所在位置作为分类
def find_index(x, target="我"):
    try:
        # 使用 list 的 index 方法查找目标元素
        return x.index(target)
    except ValueError:
        # 如果目标元素不存在，则返回 len(x)
        return len(x)
def build_sample(vocab, sentence_length):
    #随机从字表选取sentence_length个字，可能重复
    x = [random.choice(list(vocab.keys())) for _ in range(sentence_length)]
    #指定字符串的分类，要考虑字符串中没有这个字符的情况
    y = find_index(x,"我")
    x = [vocab.get(word, vocab['unk']) for word in x]   #将字转换成序号，为了做embedding
    return x, y

#建立数据集
#输入需要的样本数量。需要多少生成多少
def build_dataset(sample_length, vocab, sentence_length):
    dataset_x = []
    dataset_y = []
    for i in range(sample_length):
        x, y = build_sample(vocab, sentence_length)
        dataset_x.append(x)
        dataset_y.append(y)
    return torch.LongTensor(dataset_x), torch.LongTensor(dataset_y)


def build_model(vocab, char_dim, sentence_length):
    model = TorchModel(char_dim, sentence_length, vocab)
    return model

#测试代码
#用来测试每轮模型的准确率
def evaluate(model, vocab, sample_length):
    model.eval()
    x, y = build_dataset(200, vocab, sample_length)   #建立200个用于测试的样本

    input_count = torch.bincount(y)
    print("本次测试集中共有%d个一类样本，%d个二类样本，%d个三类样本，%d个四类样本，%d个五类样本,%e个其它样本" % (input_count[0], input_count[1], input_count[2], input_count[3], input_count[4],len(y)-input_count[0]-input_count[1]-input_count[2]-input_count[3]-input_count[4]))

    with torch.no_grad():
        y_pred = model(x)  # 模型预测 model.forward(x)
        # Step 1: 获取预测类别
        predicted_labels = torch.argmax(y_pred, dim=1)
        # Step 2: 计算预测是否正确
        correct_predictions = (predicted_labels == y)  # 得到布尔张量
    print("正确预测个数：%d, 正确率：%f" % (sum(correct_predictions), sum(correct_predictions) / 200))

    return sum(correct_predictions) / 200



def main():
    #配置参数
    epoch_num = 10        #训练轮数
    batch_size = 20       #每次训练样本个数
    train_sample = 5000   #每轮训练总共训练的样本总数
    char_dim = 20         #每个字的维度
    sentence_length = 10   #样本文本长度
    class_num=sentence_length+1#需要预测的文本类别
    learning_rate = 0.005 #学习率
    # 建立字表
    vocab = build_vocab()
    # 建立模型
    model = build_model(vocab, char_dim, sentence_length)
    # 选择优化器
    optim = torch.optim.Adam(model.parameters(), lr=learning_rate)
    log = []
    # 训练过程
    for epoch in range(epoch_num):
        model.train()
        watch_loss = []
        for batch in range(int(train_sample / batch_size)):
            x, y = build_dataset(batch_size, vocab, sentence_length) #构造一组训练样本
            #print(f"y张量为：{y}")
            optim.zero_grad()    #梯度归零
            loss = model(x, y)   #计算loss
            loss.backward()      #计算梯度
            optim.step()         #更新权重
            watch_loss.append(loss.item())
        print("=========\n第%d轮平均loss:%f" % (epoch + 1, np.mean(watch_loss)))
        acc = evaluate(model, vocab, sentence_length)   #测试本轮模型结果
        log.append([acc, np.mean(watch_loss)])
    #画图
    plt.plot(range(len(log)), [l[0] for l in log], label="acc")  #画acc曲线
    plt.plot(range(len(log)), [l[1] for l in log], label="loss")  #画loss曲线
    plt.legend()
    plt.show()
    #保存模型
    torch.save(model.state_dict(), "model.pth")
    # 保存词表
    writer = open("vocab.json", "w", encoding="utf8")
    writer.write(json.dumps(vocab, ensure_ascii=False, indent=2))
    writer.close()
    return

#使用训练好的模型做预测
def predict(model_path, vocab_path, input_strings):
    char_dim = 20  # 每个字的维度
    sentence_length = 10  # 样本文本长度
    vocab = json.load(open(vocab_path, "r", encoding="utf8")) #加载字符表
    model = build_model(vocab, char_dim, sentence_length)     #建立模型
    model.load_state_dict(torch.load(model_path))             #加载训练好的权重
    x = []
    for input_string in input_strings:
        input_string = input_string[:sentence_length]  # 截断
        input_string += "pad" * (sentence_length - len(input_string))  # 填充
        x.append([vocab.get(char, vocab['unk']) for char in input_string])
    model.eval()   #测试模式
    with torch.no_grad():  #不计算梯度
        result = model.forward(torch.LongTensor(x))  #模型预测
        print(result)
    for i, input_string in enumerate(input_strings):
        print(print(f"输入：{input_string}, 预测类别：{torch.argmax(result[i]).item()}, 概率值：{result[i][torch.argmax(result[i]).item()].item()}")) #打印结果


if __name__ == "__main__":
    main()
    test_strings = ["fnvfee", "wz你dfg", "rqwdeg", "n我kwww"]
    predict("model.pth", "vocab.json", test_strings)
