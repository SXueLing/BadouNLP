import torch
import torch.nn as nn
import numpy as np
import random
import json
import matplotlib.pyplot as plt

class TorchModel(nn.Module):
    def __init__(self, vector_dim, sentence_length, vocab):
        super(TorchModel, self).__init__()
        self.embedding = nn.Embedding(len(vocab), vector_dim, padding_idx=0)  # Embedding 层
        self.rnn = nn.LSTM(input_size=vector_dim, hidden_size=vector_dim, batch_first=True)  # LSTM 层
        self.classify = nn.Linear(vector_dim, sentence_length + 1)  # 输出为 (句子长度+1)，包括不存在的情况
        self.loss = nn.CrossEntropyLoss()  # 使用交叉熵损失函数

    def forward(self, x, y=None):
        x = self.embedding(x)  # (batch_size, sen_len) -> (batch_size, sen_len, vector_dim)
        x, _ = self.rnn(x)  # (batch_size, sen_len, vector_dim)
        x = x[:, -1, :]  # 取最后一个时间步的输出 (batch_size, vector_dim)
        logits = self.classify(x)  # (batch_size, vector_dim) -> (batch_size, sen_len+1)
        if y is not None:
            return self.loss(logits, y)  # 计算交叉熵损失
        else:
            return logits  # 返回预测结果


def build_vocab():
    chars = "你我他defghijklmnopqrstuvwxyz"  # 字符集
    vocab = {"pad": 0}
    for index, char in enumerate(chars):
        vocab[char] = index + 1  # 每个字对应一个序号
    vocab["unk"] = len(vocab)
    return vocab


def build_sample(vocab, sentence_length):
    x = [random.choice(list(vocab.keys())) for _ in range(sentence_length)]  # 随机生成字符序列
    target_char = "你"  # 需要判断的位置字符
    if target_char in x:
        y = x.index(target_char) + 1  # 返回字符的位置（从 1 开始）
    else:
        y = 0  # 表示不存在
    x = [vocab.get(word, vocab["unk"]) for word in x]  # 转换为序号
    return x, y


def build_dataset(sample_length, vocab, sentence_length):
    dataset_x = []
    dataset_y = []
    for _ in range(sample_length):
        x, y = build_sample(vocab, sentence_length)
        dataset_x.append(x)
        dataset_y.append(y)
    return torch.LongTensor(dataset_x), torch.LongTensor(dataset_y)


def build_model(vocab, char_dim, sentence_length):
    return TorchModel(char_dim, sentence_length, vocab)


def evaluate(model, vocab, sample_length):
    model.eval()
    x, y = build_dataset(200, vocab, sample_length)
    correct, total = 0, len(y)
    with torch.no_grad():
        logits = model(x)
        predictions = torch.argmax(logits, dim=1)
        correct = (predictions == y).sum().item()
    print(f"Accuracy: {correct / total:.4f}")
    return correct / total


def main():
    # 配置参数
    epoch_num = 10        # 训练轮数
    batch_size = 20       # 每次训练样本个数
    train_sample = 500    # 每轮训练总共训练的样本总数
    char_dim = 20         # 每个字的维度
    sentence_length = 6   # 样本文本长度
    learning_rate = 0.005 # 学习率
    # 建立字表
    vocab = build_vocab()
    # 建立模型
    model = build_model(vocab, char_dim, sentence_length)
    # 选择优化器
    optim = torch.optim.Adam(model.parameters(), lr=learning_rate)
    log = []
    # 训练过程
    for epoch in range(epoch_num):
        model.train()
        watch_loss = []
        for batch in range(int(train_sample / batch_size)):
            x, y = build_dataset(batch_size, vocab, sentence_length) # 构造一组训练样本
            optim.zero_grad()    # 梯度归零
            loss = model(x, y)   # 计算 loss
            loss.backward()      # 计算梯度
            optim.step()         # 更新权重
            watch_loss.append(loss.item())
        print("=========\n第%d轮平均loss:%f" % (epoch + 1, np.mean(watch_loss)))
        acc = evaluate(model, vocab, sentence_length)   # 测试本轮模型结果
        log.append([acc, np.mean(watch_loss)])
    # 画图
    plt.plot(range(len(log)), [l[0] for l in log], label="acc")  # 画 acc 曲线
    plt.plot(range(len(log)), [l[1] for l in log], label="loss")  # 画 loss 曲线
    plt.legend()
    plt.show()
    # 保存模型
    torch.save(model.state_dict(), "model.pth")
    # 保存词表
    writer = open("vocab.json", "w", encoding="utf8")
    writer.write(json.dumps(vocab, ensure_ascii=False, indent=2))
    writer.close()
    return


def predict(model_path, vocab_path, input_strings, target_char="你"):
    char_dim = 20  # 每个字的维度
    sentence_length = 6  # 样本文本长度
    vocab = json.load(open(vocab_path, "r", encoding="utf8"))  # 加载字符表
    model = build_model(vocab, char_dim, sentence_length)  # 建立模型
    model.load_state_dict(torch.load(model_path))  # 加载训练好的权重
    
    # 处理输入数据
    x = []
    for input_string in input_strings:
        encoded = [vocab.get(char, vocab["unk"]) for char in input_string]  # 将输入序列化
        if len(encoded) < sentence_length:  # 如果长度不足，补全至固定长度
            encoded += [vocab["pad"]] * (sentence_length - len(encoded))
        x.append(encoded[:sentence_length])  # 截断到固定长度
    
    model.eval()  # 切换到测试模式
    with torch.no_grad():  # 不计算梯度
        logits = model.forward(torch.LongTensor(x))  # 模型预测
        predictions = torch.argmax(logits, dim=1)  # 获取每个输入的预测位置索引
        probabilities = torch.softmax(logits, dim=1)  # 转化为概率分布
    
    # 输出预测结果
    for i, input_string in enumerate(input_strings):
        pred_position = predictions[i].item()  # 预测的位置
        prob_distribution = probabilities[i].cpu().numpy()  # 概率分布
        if pred_position == 0:
            print(f"输入：'{input_string}'，预测结果：'{target_char}' 不存在")
        else:
            print(
                f"输入：'{input_string}'，预测结果：'{target_char}' 在位置 {pred_position}，概率：{prob_distribution[pred_position]:.4f}"
            )



if __name__ == "__main__":
    main()
    test_strings = ["fnvfee", "wz你dfg", "rqwdeg", "n我kwww"]
    predict("model.pth", "vocab.json", test_strings)
